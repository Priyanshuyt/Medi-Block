import os
from web3 import Web3
from dotenv import load_dotenv
import logging

load_dotenv()

# Logger setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
PRIVATE_KEY = os.getenv("0x4c0883a69102937d6231471b5dbb6204fe512961708279a2c1xxxxxxxxxx")
PUBLIC_KEY = os.getenv("0xF1fAE51e00cFe5C9D6B95eB674F1xxxxxxxxxxx")
RPC_URL = os.getenv("RPC_URL", "https://polygon-mumbai.infura.io/v3/YOUR_PROJECT_ID")

# Initialize Web3 instance
web3 = Web3(Web3.HTTPProvider(RPC_URL))

if not web3.isConnected():
    raise ConnectionError("Failed to connect to Polygon Mumbai RPC.")

# Constants
CHAIN_ID = 80001  # Polygon Mumbai testnet

def log_report_to_blockchain(report_hash: str, ipfs_cid: str) -> str:
    """
    Logs a report's hash and IPFS CID to the Polygon Mumbai blockchain.
    
    Args:
        report_hash (str): SHA-256 hash of the report
        ipfs_cid (str): CID of the report stored on IPFS

    Returns:
        str: Transaction hash of the blockchain entry
    """
    try:
        nonce = web3.eth.get_transaction_count(PUBLIC_KEY)
        message = f"ReportHash:{report_hash},IPFS:{ipfs_cid}"
        logger.info(f"Preparing transaction for message: {message}")

        # Transaction configuration
        tx = {
            'chainId': CHAIN_ID,
            'nonce': nonce,
            'to': PUBLIC_KEY,  # send to self to create log entry
            'value': 0,
            'gas': 200000,
            'gasPrice': web3.to_wei('2', 'gwei'),
            'data': web3.to_hex(text=message),
        }

        signed_tx = web3.eth.account.sign_transaction(tx, PRIVATE_KEY)
        tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)

        logger.info(f"Transaction submitted. TxHash: {web3.to_hex(tx_hash)}")
        return web3.to_hex(tx_hash)

    except Exception as e:
        logger.error(f"Blockchain logging failed: {e}")
        raise
